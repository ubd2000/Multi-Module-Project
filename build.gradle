buildscript {
    ext {
        springBootVersion = '2.5.4'
        queryDslVersion = '4.4.0'
        mapstructVersion = '1.4.2.Final'
        lombokVersion = '1.18.20'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.rest'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web-services'

        //Test에서 lombok 사용하고 싶으면 아래 추가
//    testCompileOnly 'org.projectlombok:lombok'
//    testAnnotationProcessor 'org.projectlombok:lombok'

        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        runtimeOnly 'com.h2database:h2'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
        implementation 'org.springframework.boot:spring-boot-starter-validation'

    }
}

project(':module-domain') {
    // domain 모듈에만 필요한 라이브러리가 발생하면 이곳에 추가한다.
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'

        // for QueryDSL
        implementation "com.querydsl:querydsl-core:${queryDslVersion}"
        implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
        annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jpa"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"

        //Gradle 5이상 부터 annotationProcessor , compoleOnly 등.. 어노테이션을 구별해서 추가해야함.(안그럴 시 Lombok Compile Error 발생)
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"

        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
        //Mapstruct 사용 중 Builder를 사용하기 위해선 아래에 lombok, binding 추가 해야 정상작동
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    }
}

project(':module-api') {
    // api 모듈에만 필요한 라이브러리가 발생하면 이곳에 추가한다.
    dependencies {
        implementation "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation project(':module-domain')
    }
}

// for QueryDSL
task cleanGeneatedDir(type: Delete) {
    delete file('src/main/generated')
}